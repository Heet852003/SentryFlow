version: '3.8'

services:
  # Backend API service
  backend:
    build: ./backend
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sentryflow
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=your_jwt_secret_key_change_in_production
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - sentryflow-network

  # Frontend service
  frontend:
    build: ./frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - sentryflow-network

  # Analytics aggregator service
  aggregator:
    build: ./aggregator
    restart: always
    depends_on:
      - kafka
      - clickhouse
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
      - CLICKHOUSE_DATABASE=sentryflow
    volumes:
      - ./aggregator:/app
    networks:
      - sentryflow-network

  # PostgreSQL database
  postgres:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sentryflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sentryflow-network

  # Redis for rate limiting and caching
  redis:
    image: redis:6
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sentryflow-network

  # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: always
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - sentryflow-network

  # Kafka for event streaming
  kafka:
    image: bitnami/kafka:latest
    restart: always
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - sentryflow-network

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    networks:
      - sentryflow-network

  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=sentryflow
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - sentryflow-network

networks:
  sentryflow-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  zookeeper-data:
  kafka-data:
  clickhouse-data: